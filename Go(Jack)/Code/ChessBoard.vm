function ChessBoard.DisplayHint 2
push argument 0
pop pointer 0
push this 0
push constant 2
call Math.divide 2
pop local 0
push this 1
push constant 9
push this 2
call Math.multiply 2
add
pop local 1
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push local 1
push constant 10
call Screen.drawCircle 3
pop temp 0
push this 9
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push local 1
push constant 9
call Screen.drawCircle 3
pop temp 0
label IF_FALSE0
push constant 0
return
function ChessBoard.DisplayClick 2
push argument 0
pop pointer 0
push this 0
push this 7
push this 2
call Math.multiply 2
add
pop local 0
push this 1
push this 8
push this 2
call Math.multiply 2
add
pop local 1
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push this 4
sub
push local 1
push this 4
sub
push local 0
push this 4
add
push local 1
push this 4
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function ChessBoard.DisplayPiece 11
push argument 0
pop pointer 0
push argument 1
push this 3
call Math.divide 2
pop local 0
push argument 1
push local 0
push this 3
call Math.multiply 2
sub
pop local 1
push this 0
push local 0
push this 2
call Math.multiply 2
add
pop local 2
push this 1
push local 1
push this 2
call Math.multiply 2
add
pop local 3
push constant 0
call Screen.setColor 1
pop temp 0
push argument 1
push this 7
push this 3
call Math.multiply 2
push this 8
add
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push this 6
add
pop pointer 1
push that 0
push constant 1
eq
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
push this 4
sub
push local 3
push this 4
sub
push local 2
push this 4
add
push local 3
push this 4
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END1
label IF_FALSE1
push local 2
push this 4
sub
push local 3
push this 4
sub
push local 2
push this 4
sub
push constant 1
add
push local 3
push this 4
sub
push constant 1
add
call Screen.drawRectangle 4
pop temp 0
push local 2
push this 4
add
push constant 1
sub
push local 3
push this 4
sub
push local 2
push this 4
add
push local 3
push this 4
sub
push constant 1
add
call Screen.drawRectangle 4
pop temp 0
push local 2
push this 4
sub
push local 3
push this 4
add
push constant 1
sub
push local 2
push this 4
sub
push constant 1
add
push local 3
push this 4
add
call Screen.drawRectangle 4
pop temp 0
push local 2
push this 4
add
push constant 1
sub
push local 3
push this 4
add
push constant 1
sub
push local 2
push this 4
add
push local 3
push this 4
add
call Screen.drawRectangle 4
pop temp 0
label IF_END1
label IF_FALSE0
push argument 1
push this 6
add
pop pointer 1
push that 0
push constant 1
eq
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 2
push local 3
push this 5
call Screen.drawCircle 3
pop temp 0
label IF_FALSE2
push this 4
push this 5
call Math.max 2
pop local 6
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push this 6
add
pop pointer 1
push that 0
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 2
push local 3
push this 5
call Screen.drawCircle 3
pop temp 0
push constant 0
return
label IF_FALSE3
push local 0
push constant 0
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 2
pop local 7
goto IF_END4
label IF_FALSE4
push local 2
push local 6
sub
pop local 7
label IF_END4
push local 1
push constant 0
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 3
pop local 9
goto IF_END5
label IF_FALSE5
push local 3
push local 6
sub
pop local 9
label IF_END5
push local 0
push this 3
push constant 1
sub
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 2
pop local 8
goto IF_END6
label IF_FALSE6
push local 2
push local 6
add
pop local 8
label IF_END6
push local 1
push this 3
push constant 1
sub
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 3
pop local 10
goto IF_END7
label IF_FALSE7
push local 3
push local 6
add
pop local 10
label IF_END7
push argument 1
push this 6
add
pop pointer 1
push that 0
push constant 1
neg
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 7
push local 3
push local 8
push local 3
call Screen.drawLine 4
pop temp 0
push local 2
push local 9
push local 2
push local 10
call Screen.drawLine 4
pop temp 0
push local 0
push constant 3
eq
push local 0
push constant 9
eq
or
push local 0
push constant 15
eq
or
push local 1
push constant 3
eq
push local 1
push constant 9
eq
or
push local 1
push constant 15
eq
or
and
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push local 2
push local 3
push constant 3
call Screen.drawCircle 3
pop temp 0
label IF_FALSE9
label IF_FALSE8
push argument 1
push this 6
add
pop pointer 1
push that 0
push constant 1
eq
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 2
push local 3
push this 5
call Screen.drawCircle 3
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push local 2
push local 3
push this 5
push constant 1
sub
call Screen.drawCircle 3
pop temp 0
label IF_FALSE10
push constant 0
return
function ChessBoard.Display 0
push argument 0
pop pointer 0
push this 12
push constant 1
add
pop this 12
push this 12
push constant 599
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 12
push constant 600
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
push this 7
push this 3
call Math.multiply 2
push this 8
add
call ChessBoard.DisplayPiece 2
pop temp 0
label IF_FALSE1
push this 12
push constant 19999
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
pop this 12
label IF_FALSE2
goto IF_END0
label IF_FALSE0
push pointer 0
call ChessBoard.DisplayClick 1
pop temp 0
label IF_END0
push constant 0
return
function ChessBoard.PlacePiece 1
push argument 0
pop pointer 0
push this 7
push this 3
call Math.multiply 2
push this 8
add
pop local 0
push local 0
push this 6
add
pop pointer 1
push that 0
push constant 1
neg
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 11
push this 10
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 11
push constant 1
add
pop this 11
push local 0
push this 6
add
push this 9
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 9
sub
pop this 9
push pointer 0
push local 0
call ChessBoard.DisplayPiece 2
pop temp 0
push pointer 0
call ChessBoard.DisplayHint 1
pop temp 0
label IF_FALSE0
push constant 0
return
function ChessBoard.Withdraw 0
push argument 0
pop pointer 0
push this 11
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 11
push constant 1
sub
push this 10
add
pop pointer 1
push that 0
push this 6
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push pointer 0
push this 11
push constant 1
sub
push this 10
add
pop pointer 1
push that 0
call ChessBoard.DisplayPiece 2
pop temp 0
push constant 1
push this 9
sub
pop this 9
push this 11
push constant 1
sub
pop this 11
push pointer 0
call ChessBoard.DisplayHint 1
pop temp 0
label IF_FALSE0
push constant 0
return
function ChessBoard.MoveClick 0
push argument 0
pop pointer 0
push constant 1
neg
pop this 12
push pointer 0
push this 7
push this 3
call Math.multiply 2
push this 8
add
call ChessBoard.DisplayPiece 2
pop temp 0
push argument 1
push constant 3
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 7
push constant 0
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 7
push constant 1
sub
pop this 7
label IF_FALSE1
label IF_FALSE0
push argument 1
push constant 4
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 7
push this 3
push constant 1
sub
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 7
push constant 1
add
pop this 7
label IF_FALSE3
label IF_FALSE2
push argument 1
push constant 1
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push this 8
push constant 0
gt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push this 8
push constant 1
sub
pop this 8
label IF_FALSE5
label IF_FALSE4
push argument 1
push constant 2
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push this 8
push this 3
push constant 1
sub
lt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push this 8
push constant 1
add
pop this 8
label IF_FALSE7
label IF_FALSE6
push constant 0
return
function ChessBoard.InitChessBoard 2
push argument 0
pop pointer 0
call Screen.clearScreen 0
pop temp 0
push constant 0
pop this 11
push constant 0
pop this 9
push pointer 0
call ChessBoard.DisplayHint 1
pop temp 0
push constant 0
pop this 12
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
lt
not
if-goto WHILE_END0
push this 0
push local 0
push this 2
call Math.multiply 2
add
push this 1
push this 0
push local 0
push this 2
call Math.multiply 2
add
push this 1
push this 2
push this 3
push constant 1
sub
call Math.multiply 2
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push this 3
lt
not
if-goto WHILE_END1
push this 0
push this 1
push local 0
push this 2
call Math.multiply 2
add
push this 0
push this 2
push this 3
push constant 1
sub
call Math.multiply 2
add
push this 1
push local 0
push this 2
call Math.multiply 2
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
pop local 0
label WHILE_EXP2
push local 0
push this 3
push this 3
call Math.multiply 2
lt
not
if-goto WHILE_END2
push local 0
push this 6
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP2
label WHILE_END2
push constant 3
pop local 0
label WHILE_EXP3
push local 0
push constant 16
lt
not
if-goto WHILE_END3
push constant 3
pop local 1
label WHILE_EXP4
push local 1
push constant 16
lt
not
if-goto WHILE_END4
push pointer 0
push local 0
push this 3
call Math.multiply 2
push local 1
add
call ChessBoard.DisplayPiece 2
pop temp 0
push local 1
push constant 6
add
pop local 1
goto WHILE_EXP4
label WHILE_END4
push local 0
push constant 6
add
pop local 0
goto WHILE_EXP3
label WHILE_END3
push constant 0
return
function ChessBoard.init 0
push constant 13
call Memory.alloc 1
pop pointer 0
push constant 125
pop this 0
push constant 9
pop this 1
push constant 13
pop this 2
push constant 19
pop this 3
push constant 6
pop this 5
push constant 5
pop this 4
push constant 0
pop this 12
push this 3
push this 3
call Math.multiply 2
call Array.new 1
pop this 6
push this 3
push this 3
call Math.multiply 2
call Array.new 1
pop this 10
push pointer 0
call ChessBoard.InitChessBoard 1
pop temp 0
push pointer 0
push constant 0
call ChessBoard.DisplayPiece 2
pop temp 0
push constant 9
pop this 7
push constant 9
pop this 8
push pointer 0
return
